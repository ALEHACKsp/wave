#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

#include <stb_vorbis.h>
//#include <opus.h>
//#include <AL/alut.h>

#include <AL/al.h>
#include <AL/alc.h>
#include <AL/alext.h>
#include <AL/efx.h>
//#include <AL/efx-creative.h>

#include "wave.hpp"

namespace {
    bool alcInit() {
        ALCdevice *device;
        device = alcOpenDevice(NULL);
        return device ? true : "Could not open a device!", false;
    }

    void alcDeinit() {
        ALCdevice *device;
        ALCcontext *ctx;

        ctx = alcGetCurrentContext();
        if(ctx == NULL)
            return;

        device = alcGetContextsDevice(ctx);

        alcMakeContextCurrent(NULL);
        alcDestroyContext(ctx);
        alcCloseDevice(device);
    }

}

#pragma comment(lib, "user32.lib")
#pragma comment(lib, "shell32.lib")

namespace {
namespace blank_ogg
{
    const size_t size();
    const void * data();
}
}

namespace wave {

// Effect objects
LPALGENEFFECTS alGenEffects = 0;
LPALDELETEEFFECTS alDeleteEffects = 0;
LPALISEFFECT alIsEffect = 0;
LPALEFFECTI alEffecti = 0;
LPALEFFECTIV alEffectiv = 0;
LPALEFFECTF alEffectf = 0;
LPALEFFECTFV alEffectfv = 0;
LPALGETEFFECTI alGetEffecti = 0;
LPALGETEFFECTIV alGetEffectiv = 0;
LPALGETEFFECTF alGetEffectf = 0;
LPALGETEFFECTFV alGetEffectfv = 0;
// Filter objects
LPALGENFILTERS alGenFilters = 0;
LPALDELETEFILTERS alDeleteFilters = 0;
LPALISFILTER alIsFilter = 0;
LPALFILTERI alFilteri = 0;
LPALFILTERIV alFilteriv = 0;
LPALFILTERF alFilterf = 0;
LPALFILTERFV alFilterfv = 0;
LPALGETFILTERI alGetFilteri = 0;
LPALGETFILTERIV alGetFilteriv = 0;
LPALGETFILTERF alGetFilterf = 0;
LPALGETFILTERFV alGetFilterfv = 0;
// Slot objects
LPALGENAUXILIARYEFFECTSLOTS alGenAuxiliaryEffectSlots = 0;
LPALDELETEAUXILIARYEFFECTSLOTS alDeleteAuxiliaryEffectSlots = 0;
LPALISAUXILIARYEFFECTSLOT alIsAuxiliaryEffectSlot = 0;
LPALAUXILIARYEFFECTSLOTI alAuxiliaryEffectSloti = 0;
LPALAUXILIARYEFFECTSLOTIV alAuxiliaryEffectSlotiv = 0;
LPALAUXILIARYEFFECTSLOTF alAuxiliaryEffectSlotf = 0;
LPALAUXILIARYEFFECTSLOTFV alAuxiliaryEffectSlotfv = 0;
LPALGETAUXILIARYEFFECTSLOTI alGetAuxiliaryEffectSloti = 0;
LPALGETAUXILIARYEFFECTSLOTIV alGetAuxiliaryEffectSlotiv = 0;
LPALGETAUXILIARYEFFECTSLOTF alGetAuxiliaryEffectSlotf = 0;

bool init_efx()
{
    // Effect objects
    alGenEffects = (LPALGENEFFECTS)alGetProcAddress("alGenEffects");
    alDeleteEffects = (LPALDELETEEFFECTS)alGetProcAddress("alDeleteEffects");
    alIsEffect = (LPALISEFFECT)alGetProcAddress("alIsEffect");
    alEffecti = (LPALEFFECTI)alGetProcAddress("alEffecti");
    alEffectiv = (LPALEFFECTIV)alGetProcAddress("alEffectiv");
    alEffectf = (LPALEFFECTF)alGetProcAddress("alEffectf");
    alEffectfv = (LPALEFFECTFV)alGetProcAddress("alEffectfv");
    alGetEffecti = (LPALGETEFFECTI)alGetProcAddress("alGetEffecti");
    alGetEffectiv = (LPALGETEFFECTIV)alGetProcAddress("alGetEffectiv");
    alGetEffectf = (LPALGETEFFECTF)alGetProcAddress("alGetEffectf");
    alGetEffectfv = (LPALGETEFFECTFV)alGetProcAddress("alGetEffectfv");
    // Filter objects
    alGenFilters = (LPALGENFILTERS)alGetProcAddress("alGenFilters");
    alDeleteFilters = (LPALDELETEFILTERS)alGetProcAddress("alDeleteFilters");
    alIsFilter = (LPALISFILTER)alGetProcAddress("alIsFilter");
    alFilteri = (LPALFILTERI)alGetProcAddress("alFilteri");
    alFilteriv = (LPALFILTERIV)alGetProcAddress("alFilteriv");
    alFilterf = (LPALFILTERF)alGetProcAddress("alFilterf");
    alFilterfv = (LPALFILTERFV)alGetProcAddress("alFilterfv");
    alGetFilteri = (LPALGETFILTERI)alGetProcAddress("alGetFilteri");
    alGetFilteriv = (LPALGETFILTERIV)alGetProcAddress("alGetFilteriv");
    alGetFilterf = (LPALGETFILTERF)alGetProcAddress("alGetFilterf");
    alGetFilterfv = (LPALGETFILTERFV)alGetProcAddress("alGetFilterfv");
    // Slot objects
    alGenAuxiliaryEffectSlots = (LPALGENAUXILIARYEFFECTSLOTS)alGetProcAddress("alGenAuxiliaryEffectSlots");
    alDeleteAuxiliaryEffectSlots = (LPALDELETEAUXILIARYEFFECTSLOTS)alGetProcAddress("alDeleteAuxiliaryEffectSlots");
    alIsAuxiliaryEffectSlot = (LPALISAUXILIARYEFFECTSLOT)alGetProcAddress("alIsAuxiliaryEffectSlot");
    alAuxiliaryEffectSloti = (LPALAUXILIARYEFFECTSLOTI)alGetProcAddress("alAuxiliaryEffectSloti");
    alAuxiliaryEffectSlotiv = (LPALAUXILIARYEFFECTSLOTIV)alGetProcAddress("alAuxiliaryEffectSlotiv");
    alAuxiliaryEffectSlotf = (LPALAUXILIARYEFFECTSLOTF)alGetProcAddress("alAuxiliaryEffectSlotf");
    alAuxiliaryEffectSlotfv = (LPALAUXILIARYEFFECTSLOTFV)alGetProcAddress("alAuxiliaryEffectSlotfv");
    alGetAuxiliaryEffectSloti = (LPALGETAUXILIARYEFFECTSLOTI)alGetProcAddress("alGetAuxiliaryEffectSloti");
    alGetAuxiliaryEffectSlotiv = (LPALGETAUXILIARYEFFECTSLOTIV)alGetProcAddress("alGetAuxiliaryEffectSlotiv");
    alGetAuxiliaryEffectSlotf = (LPALGETAUXILIARYEFFECTSLOTF)alGetProcAddress("alGetAuxiliaryEffectSlotf");

    return true;
}

bool has_efx( ALCdevice *dev )
{
    return (alcIsExtensionPresent(dev, "ALC_EXT_EFX") == AL_TRUE); // ALC_TRUE
}


namespace
{
    size_t mread( void *t, size_t element_size, size_t num_elements, unsigned char *&data )
    {
        size_t offs = 0;

        if( t && (element_size * num_elements > 0) && data )
        {
            unsigned char *ut = (unsigned char *)t;
            unsigned char *udata = (unsigned char *)data;

            for( size_t i = 0; i < num_elements; ++i )
            {
                for( size_t e = 0; e < element_size; ++e )
                {
                    (*ut++) = (*udata++);
                }
            }

            offs = ( int(udata) - int(data) );
            data = udata;
        }

        return offs;
    }

    const char *error( ALenum error )
    {
        switch ( error )
        {
            case AL_INVALID_NAME:
                return "invalid name";
            case AL_INVALID_ENUM:
                return "invalid enum";
            case AL_INVALID_VALUE:
                return "invalid value";
            case AL_INVALID_OPERATION:
                return "invalid operation";
            case AL_OUT_OF_MEMORY:
                return "out of memory";
            default:
                return "unknown error";
        };
    }

    bool check_oal( const char *file, int line )
    {
        ALenum errorno = alGetError();

        if( errorno == AL_NO_ERROR )
            return true;

        std::stringstream ss;
        ss << "<wave/wave.cpp> says: OpenAL error! ";
        ss << error( errorno );
        ss << " at " << file << ':' << line;

        std::cerr << ss.str() << std::endl;

        return false;
    }

    template<typename T>
    T check_oal( const char *file, int line, const T &t )
    {
        check_oal( file, line );
        return t;
    }

#if defined(NDEBUG) || defined(_NDEBUG)
#   define WAVE_CHECK_AL0(...) ( (__VA_ARGS__), true )
#   define WAVE_CHECK_ALN(...) (__VA_ARGS__)
#else
#   define WAVE_CHECK_AL0(...) check_oal( __FILE__, __LINE__, ((__VA_ARGS__), true) )
#   define WAVE_CHECK_ALN(...) check_oal( __FILE__, __LINE__, (__VA_ARGS__) )
#endif

// N
#   define $alGetBoolean(...)               WAVE_CHECK_ALN( alGetBoolean(__VA_ARGS__) )
#   define $alIsBuffer(...)                 WAVE_CHECK_ALN( alIsBuffer(__VA_ARGS__) )
#   define $alIsEnabled(...)                WAVE_CHECK_ALN( alIsEnabled(__VA_ARGS__) )
#   define $alIsExtensionPresent(...)       WAVE_CHECK_ALN( alIsExtensionPresent(__VA_ARGS__) )
#   define $alIsSource(...)                 WAVE_CHECK_ALN( alIsSource(__VA_ARGS__) )
#   define $alGetDouble(...)                WAVE_CHECK_ALN( alGetDouble(__VA_ARGS__) )
#   define $alGetEnumValue(...)             WAVE_CHECK_ALN( alGetEnumValue(__VA_ARGS__) )
#   define $alGetError(...)                 WAVE_CHECK_ALN( alGetError(__VA_ARGS__) )
#   define $alGetFloat(...)                 WAVE_CHECK_ALN( alGetFloat(__VA_ARGS__) )
#   define $alGetInteger(...)               WAVE_CHECK_ALN( alGetInteger(__VA_ARGS__) )
#   define $alGetString(...)                WAVE_CHECK_ALN( alGetString(__VA_ARGS__) )

// 0
#   define $alBuffer3f(...)                 WAVE_CHECK_AL0( alBuffer3f(__VA_ARGS__) )
#   define $alBuffer3i(...)                 WAVE_CHECK_AL0( alBuffer3i(__VA_ARGS__) )
#   define $alBufferData(...)               WAVE_CHECK_AL0( alBufferData(__VA_ARGS__) )
#   define $alBufferf(...)                  WAVE_CHECK_AL0( alBufferf(__VA_ARGS__) )
#   define $alBufferfv(...)                 WAVE_CHECK_AL0( alBufferfv(__VA_ARGS__) )
#   define $alBufferi(...)                  WAVE_CHECK_AL0( alBufferi(__VA_ARGS__) )
#   define $alBufferiv(...)                 WAVE_CHECK_AL0( alBufferiv(__VA_ARGS__) )
#   define $alDeleteBuffers(...)            WAVE_CHECK_AL0( alDeleteBuffers(__VA_ARGS__) )
#   define $alDeleteSources(...)            WAVE_CHECK_AL0( alDeleteSources(__VA_ARGS__) )
#   define $alDisable(...)                  WAVE_CHECK_AL0( alDisable(__VA_ARGS__) )
#   define $alDistanceModel(...)            WAVE_CHECK_AL0( alDistanceModel(__VA_ARGS__) )
#   define $alDopplerFactor(...)            WAVE_CHECK_AL0( alDopplerFactor(__VA_ARGS__) )
#   define $alDopplerVelocity(...)          WAVE_CHECK_AL0( alDopplerVelocity(__VA_ARGS__) )
#   define $alEnable(...)                   WAVE_CHECK_AL0( alEnable(__VA_ARGS__) )
#   define $alGenBuffers(...)               WAVE_CHECK_AL0( alGenBuffers(__VA_ARGS__) )
#   define $alGenSources(...)               WAVE_CHECK_AL0( alGenSources(__VA_ARGS__) )
#   define $alGetBooleanv(...)              WAVE_CHECK_AL0( alGetBooleanv(__VA_ARGS__) )
#   define $alGetBuffer3f(...)              WAVE_CHECK_AL0( alGetBuffer3f(__VA_ARGS__) )
#   define $alGetBuffer3i(...)              WAVE_CHECK_AL0( alGetBuffer3i(__VA_ARGS__) )
#   define $alGetBufferf(...)               WAVE_CHECK_AL0( alGetBufferf(__VA_ARGS__) )
#   define $alGetBufferfv(...)              WAVE_CHECK_AL0( alGetBufferfv(__VA_ARGS__) )
#   define $alGetBufferi(...)               WAVE_CHECK_AL0( alGetBufferi(__VA_ARGS__) )
#   define $alGetBufferiv(...)              WAVE_CHECK_AL0( alGetBufferiv(__VA_ARGS__) )
#   define $alGetDoublev(...)               WAVE_CHECK_AL0( alGetDoublev(__VA_ARGS__) )
#   define $alGetFloatv(...)                WAVE_CHECK_AL0( alGetFloatv(__VA_ARGS__) )
#   define $alGetIntegerv(...)              WAVE_CHECK_AL0( alGetIntegerv(__VA_ARGS__) )
#   define $alGetListener3f(...)            WAVE_CHECK_AL0( alGetListener3f(__VA_ARGS__) )
#   define $alGetListener3i(...)            WAVE_CHECK_AL0( alGetListener3i(__VA_ARGS__) )
#   define $alGetListenerf(...)             WAVE_CHECK_AL0( alGetListenerf(__VA_ARGS__) )
#   define $alGetListenerfv(...)            WAVE_CHECK_AL0( alGetListenerfv(__VA_ARGS__) )
#   define $alGetListeneri(...)             WAVE_CHECK_AL0( alGetListeneri(__VA_ARGS__) )
#   define $alGetListeneriv(...)            WAVE_CHECK_AL0( alGetListeneriv(__VA_ARGS__) )
#   define $alGetSource3f(...)              WAVE_CHECK_AL0( alGetSource3f(__VA_ARGS__) )
#   define $alGetSource3i(...)              WAVE_CHECK_AL0( alGetSource3i(__VA_ARGS__) )
#   define $alGetSourcef(...)               WAVE_CHECK_AL0( alGetSourcef(__VA_ARGS__) )
#   define $alGetSourcefv(...)              WAVE_CHECK_AL0( alGetSourcefv(__VA_ARGS__) )
#   define $alGetSourcei(...)               WAVE_CHECK_AL0( alGetSourcei(__VA_ARGS__) )
#   define $alGetSourceiv(...)              WAVE_CHECK_AL0( alGetSourceiv(__VA_ARGS__) )
#   define $alListener3f(...)               WAVE_CHECK_AL0( alListener3f(__VA_ARGS__) )
#   define $alListener3i(...)               WAVE_CHECK_AL0( alListener3i(__VA_ARGS__) )
#   define $alListenerf(...)                WAVE_CHECK_AL0( alListenerf(__VA_ARGS__) )
#   define $alListenerfv(...)               WAVE_CHECK_AL0( alListenerfv(__VA_ARGS__) )
#   define $alListeneri(...)                WAVE_CHECK_AL0( alListeneri(__VA_ARGS__) )
#   define $alListeneriv(...)               WAVE_CHECK_AL0( alListeneriv(__VA_ARGS__) )
#   define $alSource3f(...)                 WAVE_CHECK_AL0( alSource3f(__VA_ARGS__) )
#   define $alSource3i(...)                 WAVE_CHECK_AL0( alSource3i(__VA_ARGS__) )
#   define $alSourcef(...)                  WAVE_CHECK_AL0( alSourcef(__VA_ARGS__) )
#   define $alSourcefv(...)                 WAVE_CHECK_AL0( alSourcefv(__VA_ARGS__) )
#   define $alSourcei(...)                  WAVE_CHECK_AL0( alSourcei(__VA_ARGS__) )
#   define $alSourceiv(...)                 WAVE_CHECK_AL0( alSourceiv(__VA_ARGS__) )
#   define $alSourcePause(...)              WAVE_CHECK_AL0( alSourcePause(__VA_ARGS__) )
#   define $alSourcePausev(...)             WAVE_CHECK_AL0( alSourcePausev(__VA_ARGS__) )
#   define $alSourcePlay(...)               WAVE_CHECK_AL0( alSourcePlay(__VA_ARGS__) )
#   define $alSourcePlayv(...)              WAVE_CHECK_AL0( alSourcePlayv(__VA_ARGS__) )
#   define $alSourceQueueBuffers(...)       WAVE_CHECK_AL0( alSourceQueueBuffers(__VA_ARGS__) )
#   define $alSourceRewind(...)             WAVE_CHECK_AL0( alSourceRewind(__VA_ARGS__) )
#   define $alSourceRewindv(...)            WAVE_CHECK_AL0( alSourceRewindv(__VA_ARGS__) )
#   define $alSourceStop(...)               WAVE_CHECK_AL0( alSourceStop(__VA_ARGS__) )
#   define $alSourceStopv(...)              WAVE_CHECK_AL0( alSourceStopv(__VA_ARGS__) )
#   define $alSourceUnqueueBuffers(...)     WAVE_CHECK_AL0( alSourceUnqueueBuffers(__VA_ARGS__) )
#   define $alSpeedOfSound(...)             WAVE_CHECK_AL0( alSpeedOfSound(__VA_ARGS__) )

//  dont check these (N)
#   define $alcCaptureCloseDevice(...)      ( alcCaptureCloseDevice(__VA_ARGS__) )
#   define $alcCloseDevice(...)             ( alcCloseDevice(__VA_ARGS__) )
#   define $alcIsExtensionPresent(...)      ( alcIsExtensionPresent(__VA_ARGS__) )
#   define $alcMakeContextCurrent(...)      ( alcMakeContextCurrent(__VA_ARGS__) )
#   define $alcCreateContext(...)           ( alcCreateContext(__VA_ARGS__) )
#   define $alcGetCurrentContext(...)       ( alcGetCurrentContext(__VA_ARGS__) )
#   define $alcCaptureOpenDevice(...)       ( alcCaptureOpenDevice(__VA_ARGS__) )
#   define $alcGetContextsDevice(...)       ( alcGetContextsDevice(__VA_ARGS__) )
#   define $alcOpenDevice(...)              ( alcOpenDevice(__VA_ARGS__) )
#   define $alcGetEnumValue(...)            ( alcGetEnumValue(__VA_ARGS__) )
#   define $alcGetError(...)                ( alcGetError(__VA_ARGS__) )
#   define $alcGetProcAddress(...)          ( alcGetProcAddress(__VA_ARGS__) )
#   define $alcGetString(...)               ( alcGetString(__VA_ARGS__) )

//  dont check these (0)
#   define $alcCaptureSamples(...)          ( alcCaptureSamples(__VA_ARGS__) )
#   define $alcCaptureStart(...)            ( alcCaptureStart(__VA_ARGS__) )
#   define $alcCaptureStop(...)             ( alcCaptureStop(__VA_ARGS__) )
#   define $alcDestroyContext(...)          ( alcDestroyContext(__VA_ARGS__) )
#   define $alcGetIntegerv(...)             ( alcGetIntegerv(__VA_ARGS__) )
#   define $alcProcessContext(...)          ( alcProcessContext(__VA_ARGS__) )
#   define $alcSuspendContext(...)          ( alcSuspendContext(__VA_ARGS__) )

}

std::string info() {
    alcInit();

    std::stringstream ss;
    if ($alGetString(AL_VERSION))
        ss << "OpenAL version: " << $alGetString(AL_VERSION) << std::endl;
    if ($alGetString(AL_RENDERER))
        ss << "OpenAL renderer: " << $alGetString(AL_RENDERER) << std::endl;
    if ($alGetString(AL_VENDOR))
        ss << "OpenAL vendor: " << $alGetString(AL_VENDOR) << std::endl;
    if ($alGetString(AL_EXTENSIONS))
        ss << "OpenAL extensions: " << $alGetString(AL_EXTENSIONS) << std::endl;

    alcDeinit();

    return ss.str();
}

std::vector<std::string> enumerate() {
    alcInit();

    std::vector<std::string> vs;

    if( $alcIsExtensionPresent( NULL, (const ALCchar *)"ALC_ENUMERATION_EXT" ) == AL_TRUE ) {
        const char *devices = (const char *)$alcGetString( NULL, ALC_ALL_DEVICES_SPECIFIER );

        while( std::string(devices).size() ) {
            vs.push_back(devices);
            devices += vs.back().size() + 1;
        }
    }

    alcDeinit();

    return vs;
}

bool device::init( int devnum )
{
    alcInit();

    // init
    dev = 0;
    ctx = 0;
    has_efx = 0;
    devname = std::string();

    // device name
    auto list = enumerate();
    if( devnum >= 0 && devnum < int(list.size()) )
        devname = list[ devnum ];

    // select device
    dev = $alcOpenDevice( devname.empty() ? 0 : devname.c_str() );

    //if( !dev ) return false;

    // device capabilities
    has_efx = wave::has_efx( dev );
    if( has_efx )
        init_efx();

    ALint attribs[4] = { 0 };
    attribs[0] = ALC_MAX_AUXILIARY_SENDS;
    attribs[1] = 4;

    // select device
    ctx = $alcCreateContext(dev, has_efx ? attribs : NULL );

    if( !ctx )
        return false;

    enable();

    //$alDistanceModel( AL_INVERSE_DISTANCE );
    $alDistanceModel( AL_INVERSE_DISTANCE_CLAMPED );
    listener.gain( 1.f );

    reset();

    return true;
}

void device::enable()
{
    $alcMakeContextCurrent(ctx);
}

void device::disable()
{
    $alcMakeContextCurrent(0);
}

void device::quit()
{
    if( ctx )
    {
        disable();
        $alcDestroyContext(ctx);
        ctx = 0;
    }

    if( dev )
    {
//        $alcCloseDevice(dev);
        dev = 0;
    }

    alcDeinit();
}

void device::clear() {
    for( unsigned index = sounds.size(); index-- != 0; ) {
        erase_sound( index );
    }

    for( unsigned index = speakers.size(); index-- != 0; ) {
        erase_speaker( index );
    }
}

void device::reset()
{
    clear();

    // reserve id (0) ; blank
    sound snd;
    snd.load( "ogg", blank_ogg::data(), blank_ogg::size() );

    insert_sound( snd );
}

unsigned device::insert_sound( sound &source )
{
    for( unsigned i = 0; i < sounds.size(); i++ )
    {
        if( sounds[i].samples == NULL )
        {
            sounds[i] = source;
            return i;
        }
    }

    sounds.push_back(source);
    return sounds.size() - 1;
}

void device::erase_sound( unsigned _sound ) {
    auto &sound = sounds[_sound];

    if( !sound.samples )
        return;

    // unbind sound from all sources
    for( auto &it : speakers ) {
        ALint id;
        $alGetSourcei( it.source, AL_BUFFER, &id );

        if( id == sound.buffer )
            $alSourcei( it.source, AL_BUFFER, NULL );
    }

    sound.unload();
}

unsigned device::insert_speaker( speaker &source ) {
    for( unsigned i = 0; i < speakers.size(); i++ ) {
        if( !speakers[i].buffer ) {
            speakers[i] = source;
            return i;
        }
    }

    speakers.push_back( source );
    return speakers.size() - 1;
}

void device::erase_speaker( unsigned source ) {
    speakers[source].purge();
}

bool device::ok() const {
    return dev && ctx;
}

// --------------------------------------------------------------------------

void listener::gain( const float gain ) {
    $alListenerf( AL_GAIN, gain );
}

void listener::position( const float *position3 ) {
    $alListenerfv( AL_POSITION, position3 );
}

void listener::velocity( const float *velocity3 ) {
    $alListenerfv( AL_VELOCITY, velocity3 );
}

void listener::direction( const float *direction3 ) {
    // orientation { norm(at), norm(up) };
    float orientation6[] = { direction3[0], direction3[1], direction3[2], 0, -1, 0 };
    $alListenerfv( AL_ORIENTATION, orientation6 );
}

// --------------------------------------------------------------------------

/*

ALbyte buf[BUF_SIZE];

alcGetIntegerv(mydevice, ALC_CAPTURE_SAMPLES, (ALCsizei)sizeof(ALint), &samples);
alcCaptureSamples(mydevice, (ALCvoid *)buf, samples);

*/

// --------------------------------------------------------------------------

bool sound::load( const std::string &type, const void *data, size_t size ) {
    if( type.empty() )
        return false;

    if( !data )
        return false;

    if( !size )
        return false;

    unload();

    this->path = "mem://";
    this->type = type;

    // Clear error flag
    alGetError();

    if( type == "ogg" ) {
        auto *oss = stb_vorbis_open_memory( (unsigned char *)data, size, NULL, NULL);;

        if( !oss )
            return "cant decode .ogg file", false;

        stb_vorbis_info info = stb_vorbis_get_info(oss);

        this->format = info.channels == 1 ? AL_FORMAT_MONO16 : AL_FORMAT_STEREO16;
        this->sampleRate = info.sample_rate;

        this->size = (stb_vorbis_stream_length_in_samples(oss) * info.channels);

        this->samples = new short[this->size];

        stb_vorbis_get_samples_short_interleaved(oss, info.channels, this->samples, this->size );

        this->size *= sizeof(short);

        stb_vorbis_close(oss);
    }
#if 0
    else
    if( type == "wav" ) {
        ALboolean al_bool;
        ALvoid *data;
        alutLoadWAVFile(pathfile, &this->format, &data, &this->size, &this->sampleRate, &al_bool);
        this->samples = (short *) data;
    }
    else
    if( type == "opus" ) {
        int error;

        OpusDecoder *dec;
        dec = opus_decoder_create(48000, 2, &error);

        int samples = 2000;
        opus_int16 *pcm = new opus_int16[ samples * 2 /*stereo*/ ];
        int len = opus_decode( dec, (const unsigned char *)data, (opus_int32)size, pcm, samples, 0 );

        std::cout << "decoded: " << len << std::endl;
/*
        this->format = info.channels == 1 ? AL_FORMAT_MONO16 : AL_FORMAT_STEREO16;
        this->sampleRate = info.sample_rate;
        this->size = (stb_vorbis_stream_length_in_samples(oss) * info.channels);
        this->samples = new short[this->size];
        stb_vorbis_get_samples_short_interleaved(oss, info.channels, this->samples, this->size );
        this->size *= sizeof(short);
*/

        opus_decoder_destroy(dec);

        delete [] pcm;
    }
#endif
    else {
        return "unsupported file format", false;
    }

    $alGenBuffers( 1, &this->buffer );

    if( !$alBufferData( this->buffer, this->format, this->samples, this->size, this->sampleRate ) ) {
        $alDeleteBuffers( 1, &this->buffer );
        return "something went wrong", false;
    }

    seconds = 0;
    if( buffer && samples ) {
        ALint size, bits, channels, freq;

        $alGetBufferi(buffer, AL_SIZE, &size);
        $alGetBufferi(buffer, AL_BITS, &bits);
        $alGetBufferi(buffer, AL_CHANNELS, &channels);
        $alGetBufferi(buffer, AL_FREQUENCY, &freq);

        if( alGetError() == AL_NO_ERROR )
            seconds = (ALfloat)((ALuint)size/channels/(bits/8)) / (ALfloat)freq;
    }

    return true;
}

bool sound::load( const std::string &pathfile ) {
    const char *type = strrchr(pathfile.c_str(), '.') + 1;

    std::ifstream t( pathfile, std::ios::in | std::ios::binary );
    std::stringstream buffer;
    buffer << t.rdbuf();
    const std::string &str = buffer.str();

    if( str.empty() )
        return "cannot open file", false;

    bool result = load( type, &str[0], str.size() );
    this->path = pathfile;
    return result;
}

void sound::unload() {
    if( buffer ) {
        $alDeleteBuffers( 1, &buffer );
#if 0
        alutUnloadWAV( sound.format, sound.samples, sound.size, sound.sampleRate );
#endif
    }

    if( samples ) {
        delete [] samples;
        samples = NULL;
    }
}

bool sound::ok() const {
    return samples && buffer;
}

// ---------------------------------------------------------------------------

bool speaker::create() {
    if( source )
        return true;
    $alGenSources( 1, &source );
    return source > 0;
}

bool speaker::bind( int buffer ) {
    if( this->buffer )
        unbind();

    this->buffer = buffer;

    loop( false );
    $alSourcei( source, AL_SOURCE_RELATIVE, AL_FALSE );

    $alSourcei( source, AL_BUFFER, buffer );
    //$alSourceQueue

    $alSourcef( source, AL_MIN_GAIN, 0.0f );
    $alSourcef( source, AL_MAX_GAIN, 1.0f );

    gain( 1.f );
    pitch( 1.f );

    // seeking : AL_SEC_OFFSET (secs), AL_SAMPLE_OFFSET (samps), AL_BYTE_OFFSET(bytes)
    // must be reset back on every loop
    // $alSourcef( soundSource.source, AL_SEC_OFFSET, 5.0f );

    return true;
}

void speaker::unbind() {
    if( !buffer )
        return;
    $alSourcei( source, AL_BUFFER, NULL );
    buffer = 0;
}

void speaker::purge() {
    unbind();
    if( !source )
        return;
    $alDeleteSources( 1, &source );
    source = 0;
}

void speaker::play() {
    $alSourcePlay( source );
}

void speaker::stop() {
    $alSourceStop( source );
}

void speaker::pause() {
    $alSourcePause( source );
}

bool speaker::is_playing() const {
    ALint state;
    $alGetSourcei( source, AL_SOURCE_STATE, &state );
    return ( state == AL_PLAYING );
}

void speaker::loop( const bool on ) {
    $alSourcei( source, AL_LOOPING, on ? AL_TRUE : AL_FALSE );
}

void speaker::gain( const float gain ) {
    $alSourcef( source, AL_GAIN, gain );
}

/* pitch, speed stretching */
void speaker::pitch( const float pitch ) {
    // if pitch == 0.f pitch = 0.0001f;
    $alSourcef( source, AL_PITCH, pitch );
}

/* tempo, time stretching */
/* @todo: check soundtouch library { pitch, tempo, bpm } */
/*

*/

void speaker::position( const float *position3, bool relative ) {
    $alSourcefv( source, AL_POSITION, position3 );
    $alSourcei( source, AL_SOURCE_RELATIVE, relative ? AL_TRUE : AL_FALSE );
}

void speaker::velocity( const float *velocity3 ) {
    $alSourcefv( source, AL_VELOCITY, velocity3 );
}

void speaker::direction( const float *direction3 ) {
    $alSourcefv( source, AL_DIRECTION, direction3 );
}

void speaker::attenuation( const float rollOff, const float refDistance ) {
    $alSourcef( source, AL_REFERENCE_DISTANCE, refDistance );
    $alSourcef( source, AL_ROLLOFF_FACTOR, rollOff );
}

/*
void speaker::distance( const float mind, const float maxd ) {
    $alSourcef( source, AL_REFERENCE_DISTANCE, mind );
    $alSourcef( source, AL_MAX_DISTANCE, maxd );
}
*/

bool speaker::ok() const {
    return source && buffer;
}

void speaker::play( const sound &snd, void (*efxpre)(int), void (*efxpost)(int) ) {
    create();
    bind( snd.buffer );
    if( efxpre ) (*efxpre)( source );
    play();
    if( efxpost ) (*efxpost)( source );
}

// ----------------------------------------------------------------------------

} // ::wave


namespace {
// generated by b2cpp
namespace blank_ogg
{
    const size_t size()
    {
        return 2710;
    }
    const void * data()
    {
        static const unsigned char data[] =
        {
            0x4f,0x67,0x67,0x53,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x60, // 0..15
            0x00,0x00,0x00,0x00,0x00,0x00,0x59,0xd1,0xba,0xd5,0x01,0x1e,0x01,0x76,0x6f,0x72, // 16..31
            0x62,0x69,0x73,0x00,0x00,0x00,0x00,0x01,0x40,0x1f,0x00,0x00,0x00,0x00,0x00,0x00, // 32..47
            0x60,0x6d,0x00,0x00,0x00,0x00,0x00,0x00,0x99,0x01,0x4f,0x67,0x67,0x53,0x00,0x00, // 48..63
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x60,0x00,0x00,0x01,0x00,0x00,0x00, // 64..79
            0xc4,0x2c,0x33,0xe0,0x0b,0x2d,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb5, // 80..95
            0x03,0x76,0x6f,0x72,0x62,0x69,0x73,0x1d,0x00,0x00,0x00,0x58,0x69,0x70,0x68,0x2e, // 96..111
            0x4f,0x72,0x67,0x20,0x6c,0x69,0x62,0x56,0x6f,0x72,0x62,0x69,0x73,0x20,0x49,0x20, // 112..127
            0x32,0x30,0x30,0x37,0x30,0x36,0x32,0x32,0x00,0x00,0x00,0x00,0x01,0x05,0x76,0x6f, // 128..143
            0x72,0x62,0x69,0x73,0x12,0x42,0x43,0x56,0x01,0x00,0x00,0x01,0x00,0x0c,0x52,0x14, // 144..159
            0x21,0x25,0x19,0x53,0x4a,0x63,0x08,0x95,0x52,0x52,0x29,0x05,0x1d,0x63,0x50,0x5b, // 160..175
            0x47,0x1d,0x63,0xd4,0x39,0x46,0x21,0x64,0x10,0x53,0x88,0x49,0x19,0xa5,0x7b,0x4f, // 176..191
            0x2a,0x95,0x58,0x4a,0xc8,0x11,0x52,0x58,0x29,0x45,0x1d,0x53,0x4c,0x53,0x49,0x95, // 192..207
            0x52,0x96,0x29,0x45,0x1d,0x63,0x14,0x53,0x48,0x21,0x53,0xd6,0x31,0x65,0xa1,0x73, // 208..223
            0x14,0x4b,0x86,0x49,0x09,0x25,0x6c,0x4d,0xae,0x74,0x16,0x4b,0xe8,0x99,0x63,0x96, // 224..239
            0x31,0x46,0x1d,0x63,0xce,0x5a,0x4a,0x9d,0x63,0xd6,0x31,0x45,0x1d,0x63,0x52,0x52, // 240..255
            0x49,0xa1,0x73,0x18,0x3a,0x66,0x25,0x64,0x14,0x3a,0x46,0xc5,0xe8,0x62,0x7c,0x30, // 256..271
            0x3a,0x95,0xa2,0x42,0x28,0xbe,0xc7,0xde,0x52,0xe9,0x2d,0x85,0x8a,0x5b,0x8a,0xbd, // 272..287
            0xd7,0x1a,0x53,0xeb,0x2d,0x84,0x18,0x4b,0x69,0xc1,0x08,0x61,0x73,0xed,0xb5,0xd5, // 288..303
            0xdc,0x4a,0x6a,0xc5,0x18,0x63,0x8c,0x31,0xc6,0xc5,0xe2,0x53,0x28,0x82,0xd0,0x90, // 304..319
            0x55,0x00,0x00,0x01,0x00,0x00,0x40,0x04,0x01,0x42,0x43,0x56,0x01,0x00,0x0a,0x00, // 320..335
            0x00,0xc2,0x50,0x0c,0x45,0x51,0x80,0xd0,0x90,0x55,0x00,0x40,0x06,0x00,0x80,0x00, // 336..351
            0x14,0x45,0x71,0x14,0xc7,0x71,0x1c,0x47,0x92,0x24,0xcb,0x02,0x42,0x43,0x56,0x01, // 352..367
            0x00,0x40,0x00,0x00,0x02,0x00,0x00,0x28,0x8e,0xe1,0x28,0x92,0x23,0x49,0x92,0x64, // 368..383
            0x59,0x96,0x65,0x59,0x96,0xa6,0x79,0x96,0xa8,0xb9,0xaa,0x2f,0xfb,0xae,0x2e,0xeb, // 384..399
            0xae,0xed,0xea,0xba,0x0e,0x84,0x86,0xac,0x04,0x00,0xc8,0x00,0x00,0x18,0x86,0x21, // 400..415
            0x87,0xde,0x49,0xcc,0x90,0x53,0x90,0x49,0x26,0x29,0x55,0xcc,0x39,0x08,0xa1,0xf5, // 416..431
            0x0e,0x39,0xe5,0x14,0x64,0xd2,0x52,0xc6,0x98,0x62,0x8c,0x51,0xce,0x90,0x53,0x0c, // 432..447
            0x31,0x05,0x31,0x86,0xd0,0x29,0x85,0x10,0xd4,0x4e,0x39,0xa5,0x0c,0x22,0x08,0x43, // 448..463
            0x48,0x9d,0x64,0xce,0x20,0x4b,0x3d,0xe8,0xe0,0x62,0xe7,0x38,0x10,0x1a,0xb2,0x22, // 464..479
            0x00,0x88,0x02,0x00,0x00,0x8c,0x41,0x8c,0x21,0xc6,0x90,0x73,0x0c,0x4a,0x06,0x21, // 480..495
            0x72,0x8e,0x49,0xc8,0x20,0x44,0xce,0x39,0x29,0x9d,0x94,0x4c,0x4a,0x28,0xad,0xb4, // 496..511
            0x96,0x49,0x09,0x2d,0x95,0xd6,0x22,0xe7,0x9c,0x94,0x4e,0x4a,0x26,0xa5,0xb4,0x16, // 512..527
            0x52,0xcb,0xa4,0x94,0xd6,0x42,0x2b,0x05,0x00,0x00,0x04,0x38,0x00,0x00,0x04,0x58, // 528..543
            0x08,0x85,0x86,0xac,0x08,0x00,0xa2,0x00,0x00,0x10,0x83,0x90,0x52,0x48,0x29,0xc4, // 544..559
            0x94,0x62,0x4e,0x31,0x87,0x94,0x52,0x8e,0x29,0xc7,0x90,0x52,0xcc,0x39,0xc5,0x98, // 560..575
            0x72,0x8c,0x31,0xe8,0x20,0x54,0xcc,0x31,0xc8,0x1c,0x84,0x48,0x29,0xc5,0x18,0x73, // 576..591
            0x4e,0x39,0xe6,0x20,0x64,0x0c,0x2a,0xe6,0x1c,0x84,0x0c,0x32,0x01,0x00,0x00,0x01, // 592..607
            0x0e,0x00,0x00,0x01,0x16,0x42,0xa1,0x21,0x2b,0x02,0x80,0x38,0x01,0x00,0x83,0x24, // 608..623
            0x69,0x9a,0xa5,0x69,0xa2,0x68,0x69,0x9a,0x28,0x7a,0xa6,0xa8,0xaa,0xa2,0x28,0xaa, // 624..639
            0xaa,0xe5,0x79,0xa6,0xe9,0x99,0xa6,0xaa,0x7a,0xa2,0xa9,0xaa,0xa6,0xaa,0xba,0xae, // 640..655
            0xa9,0xaa,0xae,0x6c,0x79,0x9e,0x69,0x7a,0xa6,0xa8,0xaa,0x9e,0x29,0xaa,0xaa,0xa9, // 656..671
            0xaa,0xae,0x6b,0xaa,0xaa,0xeb,0x8a,0xaa,0x6a,0xcb,0xa6,0xab,0xda,0xb6,0xe9,0xaa, // 672..687
            0xb6,0xec,0xca,0xb2,0x6e,0xbb,0xb2,0xac,0xdb,0x9e,0xaa,0xca,0xb6,0xa9,0xba,0xb2, // 688..703
            0x6e,0xaa,0xae,0x6d,0xbb,0xb2,0x6c,0xeb,0xae,0x2c,0xdb,0xba,0xe4,0x79,0xaa,0xea, // 704..719
            0x99,0xa6,0xeb,0x7a,0xa6,0xe9,0xba,0xaa,0xeb,0xda,0xb2,0xea,0xba,0xb2,0xed,0x99, // 720..735
            0xa6,0xeb,0x8a,0xaa,0x2b,0xdb,0xa6,0xeb,0xca,0xb2,0xeb,0xca,0xb6,0xad,0xca,0xb2, // 736..751
            0xae,0x6b,0xa6,0xe9,0xba,0xa2,0xab,0xda,0xae,0xa9,0xba,0xb2,0xed,0xca,0xae,0x6d, // 752..767
            0xbb,0xb2,0xac,0xfb,0xa6,0xeb,0xea,0xb6,0xea,0xca,0xba,0xae,0xca,0xb2,0xee,0xdb, // 768..783
            0xb6,0xae,0xfb,0xb2,0xad,0x0b,0xbb,0xe8,0xba,0xb6,0xae,0xca,0xae,0xae,0xab,0xb2, // 784..799
            0xac,0xeb,0xb2,0x2d,0xeb,0xb6,0x6c,0xdb,0x42,0xc9,0xf3,0x54,0xd5,0x33,0x4d,0xd7, // 800..815
            0xf5,0x4c,0xd3,0x75,0x55,0xd7,0xb5,0x6d,0xd5,0x75,0x6d,0x5b,0x33,0x4d,0xd7,0x35, // 816..831
            0x5d,0x57,0x96,0x45,0xd5,0x75,0x65,0xd5,0x95,0x75,0x5d,0x75,0x65,0x5b,0xf7,0x4c, // 832..847
            0xd3,0x75,0x4d,0x57,0x95,0x65,0xd3,0x55,0x65,0x59,0x95,0x65,0xdd,0x76,0x65,0x57, // 848..863
            0x97,0x45,0xd7,0xb5,0x6d,0x55,0x96,0x7d,0x5d,0x75,0x65,0x5f,0x97,0x6d,0xdd,0xf7, // 864..879
            0x65,0x59,0xd7,0x7d,0xd3,0x75,0x75,0x5b,0x95,0x65,0xdb,0x57,0x65,0x59,0xf7,0x65, // 880..895
            0x5d,0xf7,0x85,0x59,0xb7,0x7d,0xdd,0x53,0x55,0x5b,0x37,0x5d,0x57,0xd7,0x4d,0xd7, // 896..911
            0xd5,0x7d,0x5b,0xd7,0x7d,0x61,0xb6,0x6d,0xdf,0x17,0x5d,0x57,0xd7,0x55,0xd9,0xd6, // 912..927
            0x85,0x55,0x96,0x75,0xdf,0xd6,0x7d,0x65,0x98,0x75,0x9d,0x30,0xba,0xae,0xae,0xab, // 928..943
            0xb6,0xec,0xeb,0xaa,0x2c,0xeb,0xbe,0xae,0xeb,0xc6,0x30,0xeb,0xba,0x30,0xac,0xba, // 944..959
            0x6d,0xfc,0xae,0xad,0x0b,0xc3,0xab,0xeb,0xc6,0xb1,0xeb,0xbe,0xae,0xdc,0xbe,0x8f, // 960..975
            0x6a,0xdb,0xbe,0xf0,0xea,0xb6,0x31,0xbc,0xba,0x6e,0x1c,0xbb,0xb0,0x1b,0xbf,0xed, // 976..991
            0xfb,0xc6,0xb1,0xa9,0xaa,0x6d,0x9b,0xae,0xab,0xeb,0xa6,0x2b,0xeb,0xba,0x6c,0xeb, // 992..1007
            0xbe,0x6f,0xeb,0xba,0x71,0x8c,0xae,0xab,0xeb,0xaa,0x2c,0xfb,0xba,0xea,0xca,0xbe, // 1008..1023
            0x6f,0xeb,0xba,0xf0,0xeb,0xbe,0x2f,0x0c,0xa3,0xeb,0xea,0xba,0x2a,0xcb,0xba,0xb0, // 1024..1039
            0xda,0xb2,0xaf,0xcb,0xba,0x2e,0x0c,0xbb,0xae,0x1b,0xc3,0x6a,0xdb,0xc2,0xee,0xda, // 1040..1055
            0xba,0x70,0xcc,0xb2,0x2e,0x0c,0xb7,0xef,0x2b,0xc7,0xaf,0x0b,0x43,0xd5,0xb6,0x85, // 1056..1071
            0xe1,0xd5,0x75,0xa3,0xab,0xdb,0xc6,0x6f,0x0b,0xc3,0xd2,0x37,0x76,0xbe,0x00,0x00, // 1072..1087
            0x80,0x01,0x07,0x00,0x80,0x00,0x13,0xca,0x40,0xa1,0x21,0x2b,0x02,0x80,0x38,0x01, // 1088..1103
            0x00,0x06,0x21,0x08,0x15,0x63,0x10,0x2a,0xc6,0x20,0x84,0x10,0x52,0x0a,0x21,0xa4, // 1104..1119
            0x54,0x31,0x06,0x21,0x63,0x0e,0x4a,0xc6,0x1c,0x94,0x10,0x4a,0x49,0x21,0x94,0xd2, // 1120..1135
            0x2a,0xc6,0x20,0x64,0x8e,0x49,0xc8,0x1c,0x93,0x10,0x4a,0x68,0xa9,0x94,0xd0,0x4a, // 1136..1151
            0x28,0xa5,0xa5,0x50,0x4a,0x4b,0xa1,0x94,0xd6,0x52,0x6a,0x2d,0xa6,0xd4,0x5a,0x0c, // 1152..1167
            0xa1,0xb4,0x14,0x4a,0x69,0xad,0x94,0xd2,0x5a,0x6a,0x29,0xb6,0xd4,0x52,0x6c,0x15, // 1168..1183
            0x63,0x10,0x32,0xe7,0xa4,0x64,0x8e,0x49,0x28,0xa5,0xb4,0x56,0x4a,0x69,0x29,0x73, // 1184..1199
            0x4c,0x4a,0xc6,0xa0,0xa4,0x0e,0x42,0x2a,0xa5,0xa4,0xd2,0x4a,0x49,0xad,0x65,0xce, // 1200..1215
            0x49,0xc9,0xa0,0xa3,0xd2,0x39,0x48,0xa9,0xa4,0xd2,0x52,0x49,0xa9,0xb5,0x50,0x4a, // 1216..1231
            0x6b,0xa1,0x94,0xd6,0x4a,0x4a,0xb1,0xa5,0xd2,0x4a,0x6d,0xad,0xc5,0x1a,0x4a,0x69, // 1232..1247
            0x2d,0xa4,0xd2,0x5a,0x49,0xa9,0xb5,0xd4,0x52,0x6d,0xad,0xb5,0x5a,0x23,0xc6,0x20, // 1248..1263
            0x64,0x8c,0x41,0xc9,0x9c,0x93,0x52,0x4a,0x49,0xa9,0x94,0xd2,0x5a,0xe6,0x9c,0x94, // 1264..1279
            0x0e,0x3a,0x2a,0x99,0x83,0x92,0x4a,0x29,0xa9,0x95,0x92,0x52,0xac,0x98,0x93,0xd2, // 1280..1295
            0x41,0x28,0x25,0x83,0x8c,0x4a,0x49,0xa5,0xb5,0x92,0x4a,0x2b,0xa1,0x94,0xd6,0x4a, // 1296..1311
            0x4a,0xb1,0x85,0x52,0x5a,0x6b,0xad,0xd5,0x98,0x52,0x4b,0x35,0x94,0x92,0x5a,0x49, // 1312..1327
            0xa9,0xc5,0x50,0x4a,0x6b,0xad,0xb5,0x1a,0x53,0x2b,0x35,0x85,0x50,0x52,0x0b,0xa5, // 1328..1343
            0xb4,0x16,0x4a,0x69,0xad,0xb5,0x56,0x6b,0x6a,0x2d,0xb6,0x50,0x42,0x6b,0xa1,0xa4, // 1344..1359
            0x16,0x4b,0x2a,0x31,0xb5,0x16,0x63,0x6d,0xad,0xc5,0x18,0x4a,0x69,0xad,0xa4,0x12, // 1360..1375
            0x5b,0x29,0xa9,0xc5,0x16,0x5b,0x8d,0xad,0xb5,0x58,0x53,0x4b,0x35,0x96,0x92,0x62, // 1376..1391
            0x6c,0xad,0xd5,0xd8,0x4a,0x2d,0x39,0xd6,0x5a,0x6b,0x4a,0x2d,0xd6,0xd2,0x52,0x8c, // 1392..1407
            0xad,0xb5,0x98,0x5b,0x4c,0xb9,0xc5,0x58,0x6b,0x0d,0x25,0xb4,0x16,0x4a,0x69,0xad, // 1408..1423
            0x94,0xd2,0x5a,0x4a,0xad,0xc5,0xd6,0x5a,0xad,0xa1,0x94,0xd6,0x4a,0x2a,0xb1,0x95, // 1424..1439
            0x92,0x5a,0x6c,0xad,0xd5,0xd8,0x5a,0x8c,0x35,0x94,0xd2,0x62,0x29,0x29,0xb5,0x90, // 1440..1455
            0x4a,0x6c,0xad,0xb5,0x58,0x5b,0x6c,0x35,0xa6,0x96,0x62,0x6c,0xb1,0xd5,0x58,0x52, // 1456..1471
            0x8b,0x31,0xc6,0x58,0x73,0x4b,0xb5,0xd5,0x94,0x5a,0x8b,0xad,0xb5,0x58,0x4b,0x2b, // 1472..1487
            0x35,0xc6,0x18,0x6b,0x6e,0x35,0xe5,0x52,0x00,0x00,0xc0,0x80,0x03,0x00,0x40,0x80, // 1488..1503
            0x09,0x65,0xa0,0xd0,0x90,0x95,0x00,0x40,0x14,0x00,0x00,0x60,0x0c,0x63,0x8c,0x41, // 1504..1519
            0x68,0x14,0x72,0xcc,0x39,0x29,0x8d,0x52,0xce,0x39,0x27,0x25,0x73,0x0e,0x42,0x08, // 1520..1535
            0x29,0x65,0xce,0x41,0x08,0x21,0xa5,0xce,0x39,0x08,0xa5,0xb4,0xd4,0x39,0x07,0xa1, // 1536..1551
            0x94,0x94,0x42,0x29,0x29,0xa5,0x14,0x5b,0x28,0x25,0xa5,0xd6,0x5a,0x2c,0x00,0x00, // 1552..1567
            0xa0,0xc0,0x01,0x00,0x20,0xc0,0x06,0x4d,0x89,0xc5,0x01,0x0a,0x0d,0x59,0x09,0x00, // 1568..1583
            0x44,0x01,0x00,0x20,0xc6,0x28,0xc5,0x18,0x84,0xc6,0x20,0xa5,0x18,0x83,0xd0,0x18, // 1584..1599
            0xa3,0x14,0x63,0x10,0x2a,0xa5,0x18,0x73,0x0e,0x42,0xa5,0x14,0x63,0xce,0x41,0xc8, // 1600..1615
            0x18,0x73,0xce,0x41,0x29,0x19,0x63,0xce,0x41,0x27,0x25,0x84,0x10,0x42,0x29,0xa5, // 1616..1631
            0x84,0x10,0x42,0x28,0xa5,0x94,0x02,0x00,0x00,0x0a,0x1c,0x00,0x00,0x02,0x6c,0xd0, // 1632..1647
            0x94,0x58,0x1c,0xa0,0xd0,0x90,0x15,0x01,0x40,0x14,0x00,0x00,0x60,0x0c,0x62,0x0c, // 1648..1663
            0x31,0x86,0x20,0x74,0x52,0x3a,0x29,0x11,0x84,0x4c,0x4a,0x27,0xa5,0x91,0x12,0x5a, // 1664..1679
            0x0b,0x29,0x65,0x96,0x4a,0x8a,0x25,0xc6,0xcc,0x5a,0x89,0xad,0xc4,0xd8,0x48,0x09, // 1680..1695
            0xad,0x85,0xd6,0x32,0x6b,0x25,0xc6,0xd2,0x62,0x46,0xad,0xc4,0x58,0x62,0x2a,0x00, // 1696..1711
            0x00,0xec,0xc0,0x01,0x00,0xec,0xc0,0x42,0x28,0x34,0x64,0x25,0x00,0x90,0x07,0x00, // 1712..1727
            0x40,0x18,0xa3,0x14,0x63,0xce,0x39,0x67,0x10,0x62,0xcc,0x39,0x08,0x21,0x34,0x08, // 1728..1743
            0x31,0xe6,0x1c,0x84,0x10,0x2a,0xc6,0x9c,0x73,0x0e,0x42,0x08,0x15,0x63,0xce,0x39, // 1744..1759
            0x07,0x21,0x84,0xce,0x39,0xe7,0x20,0x84,0x10,0x42,0xe7,0x9c,0x73,0x10,0x42,0x08, // 1760..1775
            0xa1,0x83,0x10,0x42,0x08,0xa5,0x94,0xd2,0x41,0x08,0x21,0x84,0x52,0x4a,0xe9,0x20, // 1776..1791
            0x84,0x10,0x42,0x29,0xa5,0x74,0x10,0x42,0x08,0xa1,0x94,0x52,0x0a,0x00,0x00,0x2a, // 1792..1807
            0x70,0x00,0x00,0x08,0xb0,0x51,0x64,0x73,0x82,0x91,0xa0,0x42,0x43,0x56,0x02,0x00, // 1808..1823
            0x79,0x00,0x00,0x80,0x31,0x4a,0x39,0x27,0x25,0xa5,0x46,0x29,0xc6,0x20,0xa4,0x14, // 1824..1839
            0x5b,0xa3,0x14,0x63,0x10,0x52,0x6a,0xad,0x62,0x0c,0x42,0x4a,0xad,0xc5,0x58,0x31, // 1840..1855
            0x06,0x21,0xa5,0xd6,0x62,0xec,0x20,0xa4,0xd4,0x5a,0x8c,0xb5,0x76,0x10,0x52,0x6a, // 1856..1871
            0x2d,0xc6,0x5a,0x43,0x4a,0xad,0xc5,0x58,0x6b,0xce,0x21,0xa5,0xd6,0x62,0xac,0x35, // 1872..1887
            0xd7,0xd4,0x5a,0x8c,0xb5,0xe6,0xdc,0x7b,0x6a,0x2d,0xc6,0x5a,0x73,0xce,0xb9,0x00, // 1888..1903
            0x00,0xdc,0x05,0x07,0x00,0xb0,0x03,0x1b,0x45,0x36,0x27,0x18,0x09,0x2a,0x34,0x64, // 1904..1919
            0x25,0x00,0x90,0x07,0x00,0x40,0x20,0xa4,0x14,0x63,0x8c,0x39,0x87,0x94,0x62,0x8c, // 1920..1935
            0x31,0xe7,0x9c,0x43,0x4a,0x31,0xc6,0x98,0x73,0xce,0x29,0xc6,0x18,0x73,0xce,0x39, // 1936..1951
            0xe7,0x14,0x63,0x8c,0x39,0xe7,0x9c,0x73,0x8c,0x31,0xe7,0x9c,0x73,0xce,0x39,0xc6, // 1952..1967
            0x98,0x73,0xce,0x39,0xe7,0x9c,0x73,0xce,0x39,0xe7,0xa0,0x83,0x90,0x39,0xe7,0x9c, // 1968..1983
            0x73,0xd0,0x41,0xe8,0x9c,0x73,0xce,0x39,0x08,0x21,0x74,0xce,0x39,0xe7,0x1c,0x84, // 1984..1999
            0x10,0x0a,0x00,0x00,0x2a,0x70,0x00,0x00,0x08,0xb0,0x51,0x64,0x73,0x82,0x91,0xa0, // 2000..2015
            0x42,0x43,0x56,0x02,0x00,0xe1,0x00,0x00,0x80,0x31,0x94,0x52,0x4a,0x29,0xa5,0x94, // 2016..2031
            0x52,0x4a,0xa8,0xa3,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x02,0x21,0xa5,0x94,0x52, // 2032..2047
            0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a, // 2048..2063
            0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29, // 2064..2079
            0xa5,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5, // 2080..2095
            0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x94, // 2096..2111
            0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52, // 2112..2127
            0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a, // 2128..2143
            0x29,0xa5,0x94,0x52,0x4a,0x29,0x95,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5, // 2144..2159
            0x94,0x52,0x4a,0x29,0xa5,0x00,0x20,0xdf,0x0a,0x07,0x00,0xff,0x07,0x1b,0x67,0x58, // 2160..2175
            0x49,0x3a,0x2b,0x1c,0x0d,0x2e,0x34,0x64,0x25,0x00,0x10,0x0e,0x00,0x00,0x18,0xc3, // 2176..2191
            0x18,0x84,0x8c,0x39,0x27,0x25,0xa5,0x86,0x31,0x08,0xa5,0x74,0x4e,0x4a,0x49,0x25, // 2192..2207
            0x35,0x8c,0x41,0x28,0xa5,0x73,0x12,0x52,0x4a,0x29,0x83,0xd0,0x5a,0x6a,0xa5,0xa4, // 2208..2223
            0xd2,0x52,0x4a,0x19,0x84,0x94,0x62,0x0b,0x21,0x95,0x94,0x5a,0x0a,0xa5,0xb4,0x56, // 2224..2239
            0x6b,0x29,0xa9,0xb5,0x94,0x52,0x28,0x29,0xc5,0x1a,0x4b,0x4a,0xa9,0xa5,0xd6,0x32, // 2240..2255
            0xe7,0x24,0xa4,0x92,0x5a,0x4b,0xad,0xb6,0x98,0x39,0x07,0xa5,0xa4,0xd6,0x5a,0x6a, // 2256..2271
            0xad,0xc5,0x10,0x42,0x4a,0xb1,0xb5,0xd6,0x52,0x6b,0xb1,0x75,0x52,0x52,0x49,0xad, // 2272..2287
            0xb5,0xd6,0x5a,0x6d,0x2d,0xa4,0x94,0x5a,0x6b,0x2d,0xc6,0xd6,0x62,0x6c,0x25,0xa5, // 2288..2303
            0x96,0x5a,0x6b,0xa9,0xc5,0xd6,0x5a,0x4c,0xa9,0xb5,0x16,0x5b,0x4b,0x2d,0xc6,0xd6, // 2304..2319
            0x62,0x4b,0xad,0xc5,0xd8,0x62,0x8b,0x31,0xc6,0x1a,0x0b,0x00,0xe0,0x6e,0x70,0x00, // 2320..2335
            0x80,0x48,0xb0,0x71,0x86,0x95,0xa4,0xb3,0xc2,0xd1,0xe0,0x42,0x43,0x56,0x02,0x00, // 2336..2351
            0x21,0x01,0x00,0x04,0x32,0x4a,0x39,0xe7,0x9c,0x83,0x10,0x42,0x08,0x21,0x52,0x8a, // 2352..2367
            0x31,0xe7,0xa0,0x83,0x10,0x42,0x08,0x21,0x44,0x4a,0x31,0xe6,0x9c,0x83,0x10,0x42, // 2368..2383
            0x08,0x21,0x84,0x8c,0x31,0xe7,0x20,0x84,0x10,0x42,0x08,0xa1,0x94,0x90,0x31,0xe6, // 2384..2399
            0x1c,0x84,0x10,0x42,0x08,0x21,0x84,0x52,0x3a,0xe7,0x20,0x84,0x50,0x4a,0x09,0xa5, // 2400..2415
            0x94,0x52,0x4a,0xe7,0x1c,0x84,0x10,0x42,0x08,0xa5,0x94,0x52,0x4a,0x09,0x21,0x84, // 2416..2431
            0x10,0x42,0x28,0xa5,0x94,0x52,0x4a,0x29,0x21,0x84,0x10,0x4a,0x29,0xa5,0x94,0x52, // 2432..2447
            0x4a,0x29,0x25,0x84,0x10,0x42,0x28,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x84,0x10,0x42, // 2448..2463
            0x28,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x94,0x10,0x42,0x28,0xa5,0x94,0x52,0x4a,0x29, // 2464..2479
            0xa5,0x94,0x12,0x42,0x08,0xa1,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x42,0x08,0xa5, // 2480..2495
            0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a,0x28,0x21,0x84,0x52,0x4a,0x29,0xa5,0x94, // 2496..2511
            0x52,0x4a,0x09,0x25,0x94,0x52,0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0x21,0x94,0x52, // 2512..2527
            0x4a,0x29,0xa5,0x94,0x52,0x4a,0x29,0xa5,0x00,0x00,0x80,0x03,0x07,0x00,0x80,0x00, // 2528..2543
            0x23,0xe8,0x24,0xa3,0xca,0x22,0x6c,0x34,0xe1,0xc2,0x03,0x10,0x00,0x00,0x00,0x02, // 2544..2559
            0x00,0x02,0x4c,0x00,0x81,0x01,0x82,0x82,0x51,0x08,0x02,0x84,0x11,0x08,0x00,0x00, // 2560..2575
            0x00,0x00,0x00,0x08,0x00,0xf8,0x00,0x00,0x48,0x0a,0x80,0x88,0x88,0x68,0xe6,0x0c, // 2576..2591
            0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,0x20,0x22,0x24,0x00,0x00,0x00,0x00, // 2592..2607
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x4f,0x67,0x67,0x53,0x00,0x04,0x40, // 2608..2623
            0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x22,0x60,0x00,0x00,0x02,0x00,0x00,0x00,0xf7, // 2624..2639
            0x41,0x1e,0xb7,0x21,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01, // 2640..2655
            0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01, // 2656..2671
            0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 2672..2687
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 2688..2703
            0x00,0x00,0x00,0x00,0x00,0x00
        };

        return data;
    }
}
 //namespace blank_ogg
}

#if 0

// proposal

namespace
{
    int makeid()
    {
        static int id = 0;
        return ++id;
    }

    void reset3( float *v )
    {
        v[0] = v[1] = v[2] = 0.f;
    }
}

void init( listener &ltn )
{
    ltn.id = makeid();
    ltn.gain = 0;

    reset3( ltn.position );
    reset3( ltn.velocity );
    reset3( ltn.orientation );
}

void update( listener &ltn )
{}

void init( speaker &spk )
{
    spk.id = makeid();
    spk.source = 0;
    spk.gain = 0;
    spk.reference_distance = 0;
    spk.rolloff = 0;
    spk.playing = 1;
    spk.paused = 0;
    spk.looping = 0;
    spk.relative_position = 0;

    reset3( spk.position );
    reset3( spk.velocity );
    reset3( spk.orientation );
}

int load( const std::string &resource )
{
    return device::defaults()->soundAdd( resource );
}

void unload( int source )
{
    device::defaults()->erase_sound( source );
}

void update( speaker &spk )
{
    if( !spk.source )
        return;

    spk.playing = device::defaults()->sourceIsPlaying( spk.source );

}

context::context() : id( makeid() ), device( 0 )
{
    init( ltn );
}

void update( context &ctx )
{
    update( ctx.ltn );

    for( auto &it : ctx.ui )
        update( it );

    for( auto &it : ctx.sfx )
        update( it );

    for( auto &it : ctx.bgm )
        update( it );

    for( auto &it : ctx.vox )
        update( it );

    for( auto &it : ctx.amb )
        update( it );
}

#endif
